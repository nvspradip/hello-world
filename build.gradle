/*
 * This file was generated by the Gradle 'init' task.
 */

buildscript {
    repositories {
        jcenter()
		mavenCentral()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.3.1'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
}

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*



repositories {
    mavenLocal()
    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
}

dependencies {
    implementation 'io.helidon.microprofile.bundles:helidon-microprofile-1.2:1.2.1'
    implementation 'org.glassfish.jersey.media:jersey-media-json-binding:2.26'
    implementation 'io.helidon.webserver:helidon-webserver:1.2.1'
    implementation 'io.helidon.tracing:helidon-tracing-jaeger:1.2.1'
    implementation 'io.helidon.config:helidon-config:1.2.1'
    implementation 'io.helidon.webserver:helidon-webserver-access-log:1.2.1'
    implementation 'io.helidon.microprofile.bundles:helidon-microprofile-2.2:1.2.1'
    implementation 'io.helidon.metrics:helidon-metrics:1.2.1'
    implementation 'psr.idc:com.jrockit.mc.common_5.2.0.152917:1.0'
    implementation 'psr.idc:com.jrockit.mc.flightrecorder_5.2.0.152917:1.0'
    implementation 'com.oracle.adf:dms:12.2.1-3-0'
    implementation 'com.oracle.adf:ucp:12.2.1-3-0'
    implementation 'com.oracle.adf:ojdbc8:12.2.1-3-0'
    implementation 'com.oracle.adf:wls-rest-client:12.2.1-3-0'
    implementation 'io.helidon.health:helidon-health:1.2.1'
    implementation 'io.helidon.health:helidon-health-checks:1.2.1'
    runtimeOnly 'org.jboss:jandex:2.0.4.Final'
    runtimeOnly 'javax.activation:javax.activation-api:1.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.0.1'
    compileOnly 'com.oracle.adf.library:JAX-RS-Jersey-2.x:12.2.1-3-0'
    compileOnly 'com.oracle.adf.library:Contexts-and-Dependency-Injection:12.2.1-3-0'
}

group = 'psr.idc'
version = '1.0-SNAPSHOT'
description = 'psr_quickstart_mp'
sourceCompatibility = '1.8'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task testMe{
	println 'This is test method to gradle ... '
	doLast{
	println 'testme code execution phase .. ';
	}
}

task taskY(dependsOn: 'testMe') {
   doLast{
   println 'taskY'
   }
}


task hello  {
   println 'hello ......'
   doLast{
	println 'tutorialspoint'
   }
}

task local_build(type: Exec){
    println 'Starting Local Build . . .'
//    commandLine 'dir'
}

task hello1

println tasks.getByPath('hello1').path


task buildMaven{
	doLast{
	println 'Executing maven package... ';
	exec{
	commandLine 'cmd','/c','$MAVEN_HOME/bin/mvn package';
	}
	println "Maven Package Done .... ";
	}
}

docker {
 url = 'http://localhost:2375'
 if (System.env.DOCKER_HOST) {
	url = "$System.env.DOCKER_HOST".replace("tcp", "https")
 }
}

task buildImage(type: DockerBuildImage) {
    inputDir = file('./target')
	//println inputDir;
    tag = ['psrmicrotest','adc01kkh.us.oracle.com:5000/psrmicrotest']
}

task buildDockerImageWin(dependsOn: 'buildMaven'){
	doLast{
	
	println 'Preparing docker image .. ';
    iVersion = project.hasProperty('iVersion')?project.property('iVersion'):'1'
	//println 'this is output psrmicrotest'+iVersion +' trying second type '
	exec{
	workingDir './target'
	commandLine 'cmd','/c','docker build -t psrmicrotest .';
	}
	exec{
	println 'build complete tagging image... '
	workingDir './target'
	///d/ideRuntime/mywork/mywork/BugApplication/psr_helidon_qstart/target
	commandLine 'cmd','/c','docker tag psrmicrotest adc01kkh.us.oracle.com:5000/psrmicrotest'+iVersion;
	println 'tag complete pushing image .. '
	}
	exec{
	workingDir './target'
	commandLine 'cmd','/c','docker push adc01kkh.us.oracle.com:5000/psrmicrotest'+iVersion;
	println 'push complete .. '
	}
	println 'Executed docker commands .. ';
	}
}